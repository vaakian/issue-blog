<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NodeJS on Study Notes</title><link>https://notes.vaakian.com/categories/nodejs/</link><description>Recent content in NodeJS on Study Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 21 Jan 2022 21:20:40 +0800</lastBuildDate><atom:link href="https://notes.vaakian.com/categories/nodejs/index.xml" rel="self" type="application/rss+xml"/><item><title>WebRTC: Signaling Server</title><link>https://notes.vaakian.com/frontend/webrtc-signaling-server/</link><pubDate>Fri, 21 Jan 2022 21:20:40 +0800</pubDate><guid>https://notes.vaakian.com/frontend/webrtc-signaling-server/</guid><description>Node.js服务端 服务端所需要做的事情：存储和广播房间信息 &amp;amp; 信令交换中介，包括sdp(SessionDescription)和ice(iceCandidate)。
接收基本的事件：join, offer, answer, icecandidate, leave
sdp用于协商会话连接方式之前的必要信息 ice协商的结果，用于候选的连接方式 客户端”仅在“join时带上id和nick，然后服务器存储该信息与Client对应。存储方式见：how to keep track of clients with WebSockets，或者直接在server.clients中挂载信息。
在offer和answer时，服务器取出对应的id和nick转发出去。
offer一定是广播，通过server.clients.forEach发送 answer是定向发送，带有receiverId，通过clientsMap发送 client对应表
class ClientsMap { constructor(server) { this.clients = new Map(); server.on(&amp;#39;connection&amp;#39;, (ws, req) =&amp;gt; { ws.on(&amp;#39;message&amp;#39;, (message) =&amp;gt; { const data = JSON.parse(message); if(data.type === &amp;#39;join&amp;#39;) { this.clients.set(data.id, { id: data.id, nick: data.nick, ws: ws }); // 加入时，先注册好离开事件 ws.on(&amp;#39;close&amp;#39;, () =&amp;gt; { this.</description></item></channel></rss>